for (ii in 1: length(color)) {
points(mysplit[[ii]][,xval],
mysplit[[ii]][,yval],
col=mycolor[ii],
pch=16,
cex=1.1)
}
# Place a legend in the upper left
legend("topleft", names (mysplit),pch=16, col=mycolor, horiz=FALSE, cex=0.9,pt.cex=1.4, title="Quantiles")
# Put up the dashed lines according to the Quantiles and orient argument
if (orient=="h") {abline(h=quantile(df[,yval]), lty=2)}
else {abline(v=quantile(df[,xval]), lty=2)}
}
mympg(xval="cty",yval="hwy",orient="h")
#import dataset
url <- "https://raw.githubusercontent.com/steviep42/bios545_spring_2022/main/DATA.DIR/mpg.csv"
mpg <- read.csv(url)
#show a few rows of the dataset
head(mpg)
# Orient the lines according to the quantiles of hwy.
# The default colors come from the PuOr palette
mympg <- function(df=mpg, xval="cty", yval='hwy', orient="h", col="PuOr") {
#
# mympg - function to plot variables in the mpg data dataframe
# INPUT:  df - the mpg dataframe
#         xval - a continuous variable from mpg (default is "cty")
#         yval - a continuous variable from mpg (default is "hwy")
#         orient - "h" or "v" indicates whether to draw the dashed lines
#                  based on the quantiles for the yval ("h") or the xval ("v")
#         col - a valid RColorBrewer palette (See display.brewer.all)
#               default is "PuOr" - You need 4 colors
#
# OUTPUT: none except for a plot as indicated
#import package
library('RColorBrewer')
# Get the ylimits
ylimits <- c(0,max(df[,yval]))
# Get the 4 colors
mycolor <- rev(brewer.pal(4, col))
# Plot the scatterplot
plot(df[,xval], df[,yval],
type='n',
main=paste("mpg","-",yval, "vs", xval),
xlab=xval,
ylab=yval)
ylim=ylimits
# Get the quantiles for the correct variable according to the orient argument
if (orient=="h"){
# bind the resulting quantiles to the data frame
df$mycut <- cut(df[,yval], breaks=quantile(df[,yval]),
labels=c("0-25","25-50","50-75","75-100"), include.lowest = TRUE)
mysplit <- split(df,df$mycut)
}
else{
# bind the resulting quantiles to the data frame
df$mycut <- cut(df[,xval], breaks=quantile(df[,xval]),                                            labels=c("0-25","25-50","50-75","75-100"),include.lowest = TRUE)
# split the data frame based on the quantiles (Q1,Q2, Q3, Q4)
mysplit <- split(df,df$mycut)
}
# Put up the points according the 4 colors
for (ii in 1: length(color)) {
points(mysplit[[ii]][,xval],
mysplit[[ii]][,yval],
col=mycolor[ii],
pch=16,
cex=1.1)
}
# Place a legend in the upper left
legend("topleft", names (mysplit),pch=16, col=mycolor, horiz=FALSE, cex=0.9,pt.cex=1.4, title="Quantiles")
# Put up the dashed lines according to the Quantiles and orient argument
if (orient=="h") {abline(h=quantile(df[,yval]), lty=2)}
else {abline(v=quantile(df[,xval]), lty=2)}
}
mympg(xval="cty",yval="hwy",orient="h")
# INPUT:  df - the mpg dataframe
#         xval - a continuous variable from mpg (default is "cty")
#         yval - a continuous variable from mpg (default is "hwy")
#         orient - "h" or "v" indicates whether to draw the dashed lines
#                  based on the quantiles for the yval ("h") or the xval ("v")
#         col - a valid RColorBrewer palette (See display.brewer.all)
#               default is "PuOr" - You need 4 colors
#
# OUTPUT: none except for a plot as indicated
#import package
library('RColorBrewer')
# Orient the lines according to the quantiles of hwy.
# The default colors come from the PuOr palette
mympg <- function(df=mpg, xval="cty", yval='hwy', orient="h", col="PuOr") {
#
# mympg - function to plot variables in the mpg data dataframe
# INPUT:  df - the mpg dataframe
#         xval - a continuous variable from mpg (default is "cty")
#         yval - a continuous variable from mpg (default is "hwy")
#         orient - "h" or "v" indicates whether to draw the dashed lines
#                  based on the quantiles for the yval ("h") or the xval ("v")
#         col - a valid RColorBrewer palette (See display.brewer.all)
#               default is "PuOr" - You need 4 colors
#
# OUTPUT: none except for a plot as indicated
#import package
library('RColorBrewer')
# Get the ylimits
ylimits <- c(0,max(df[,yval]))
# Get the 4 colors
mycolor <- rev(brewer.pal(4, col))
# Plot the scatterplot
plot(df[,xval], df[,yval],
type='n',
main=paste("mpg","-",yval, "vs", xval),
xlab=xval,
ylab=yval)
ylim=ylimits
# Get the quantiles for the correct variable according to the orient argument
if (orient=="h"){
# bind the resulting quantiles to the data frame
df$mycut <- cut(df[,yval], breaks=quantile(df[,yval]),
labels=c("0-25","25-50","50-75","75-100"), include.lowest = TRUE)
mysplit <- split(df,df$mycut)
}
else{
# bind the resulting quantiles to the data frame
df$mycut <- cut(df[,xval], breaks=quantile(df[,xval]),                                            labels=c("0-25","25-50","50-75","75-100"),include.lowest = TRUE)
# split the data frame based on the quantiles (Q1,Q2, Q3, Q4)
mysplit <- split(df,df$mycut)
}
# Put up the points according the 4 colors
for (ii in 1: length(color)) {
points(mysplit[[ii]][,xval],
mysplit[[ii]][,yval],
col=mycolor[ii],
pch=16,
cex=1.1)
}
# Place a legend in the upper left
legend("topleft", names (mysplit),pch=16, col=mycolor, horiz=FALSE, cex=0.9,pt.cex=1.4, title="Quantiles")
# Put up the dashed lines according to the Quantiles and orient argument
if (orient=="h") {abline(h=quantile(df[,yval]), lty=2)}
else {abline(v=quantile(df[,xval]), lty=2)}
}
mympg(xval="cty",yval="hwy",orient="h")
#import dataset
url <- "https://raw.githubusercontent.com/steviep42/bios545_spring_2022/main/DATA.DIR/mpg.csv"
mpg <- read.csv(url)
#show a few rows of the dataset
head(mpg)
# Orient the lines according to the quantiles of hwy.
# The default colors come from the PuOr palette
mympg <- function(df=mpg, xval="cty", yval='hwy', orient="h", col="PuOr") {
#
# mympg - function to plot variables in the mpg data dataframe
# INPUT:  df - the mpg dataframe
#         xval - a continuous variable from mpg (default is "cty")
#         yval - a continuous variable from mpg (default is "hwy")
#         orient - "h" or "v" indicates whether to draw the dashed lines
#                  based on the quantiles for the yval ("h") or the xval ("v")
#         col - a valid RColorBrewer palette (See display.brewer.all)
#               default is "PuOr" - You need 4 colors
#
# OUTPUT: none except for a plot as indicated
#import package
library('RColorBrewer')
# Get the ylimits
ylimits <- c(0,max(df[,yval]))
# Get the 4 colors
mycolor <- rev(brewer.pal(4, col))
# Plot the scatterplot
plot(df[,xval], df[,yval],
type='n',
main=paste("mpg","-",yval, "vs", xval),
xlab=xval,
ylab=yval)
ylim=ylimits
# Get the quantiles for the correct variable according to the orient argument
if (orient=="h"){
# bind the resulting quantiles to the data frame
df$mycut <- cut(df[,yval], breaks=quantile(df[,yval]),
labels=c("0-25","25-50","50-75","75-100"), include.lowest = TRUE)
mysplit <- split(df,df$mycut)
}
else{
# bind the resulting quantiles to the data frame
df$mycut <- cut(df[,xval], breaks=quantile(df[,xval]),                                            labels=c("0-25","25-50","50-75","75-100"),include.lowest = TRUE)
# split the data frame based on the quantiles (Q1,Q2, Q3, Q4)
mysplit <- split(df,df$mycut)
}
# Put up the points according the 4 colors
for (ii in 1: length(mycolor)) {
points(mysplit[[ii]][,xval],
mysplit[[ii]][,yval],
col=mycolor[ii],
pch=16,
cex=1.1)
}
# Place a legend in the upper left
legend("topleft", names (mysplit),pch=16, col=mycolor, horiz=FALSE, cex=0.9,pt.cex=1.4, title="Quantiles")
# Put up the dashed lines according to the Quantiles and orient argument
if (orient=="h") {abline(h=quantile(df[,yval]), lty=2)}
else {abline(v=quantile(df[,xval]), lty=2)}
}
mympg(xval="cty",yval="hwy",orient="h")
# Orient the lines according to the quantiles of cty
mympg(xval="cty",yval="hwy",orient="v")
# Plot cty vs hwy and orient the quantile lines with respect to hwy (on x-axis)
mympg(xval="hwy",yval="cty",orient="v")
# Plot hwy vs cty and orient the quantile lines with respect to hwy (on y-axis)
mympg(xval="cty",yval="hwy",orient="h")
# Plot hwy vs hwy and orient the quantile lines with respect to hwy (on the y axis)
mympg(xval="hwy",yval="hwy",orient="h")
# Plot hwy vs displ and orient the quantile lines with respect to displ (on x-axis)
# Pick a different color palette
mympg(xval="displ",yval="hwy",orient="h",col="Spectral")
# The function has defaults (see below)
mympg()
# Here is some test data.
#set a seed to get reproducible results
set.seed(199)
#
#set values to x
x <- rnorm(100, 10)
#get mean of x
smean <- mean(x)
#calculate confidence intervals
sci <- replicate(100, t.test(sample(x, rep = T))$conf.int)
#transpose of x
sci <- t(sci)
# Look at the first few rows of the 100 confidence intervals
head(sci)
# show suspected mean
smean
plot.ci <- function(simci=sci,susmean=smean,lwd=1) {
#
# INPUT: sci - a matrix of simulated confidence intervals
#        smean - the mean from a simulated population
#        lwd - an integer 1,2,..3 to set the line width of the segments
#
# OUTPUT: outside - a vector containing the row numbers where smean
#                   is not contained by the confidence interval in that row
#
# Get the xlimits and ylimits
xlimits <- c(min(simci[,1]),max(simci[,2]))
ylimits <- c(0,100)
# Set up a blank plot into which you will draw the segments
plot(simci[,1], simci[,2], type="n", xlim=xlimits, ylim=ylimits, xlab="", ylab="",
main="Confidence Intervals", lwd=lwd)
# You could use a for loop, ifelse, or some other approach
# to get the colors while noting the rows that don't contain
# susmean. As part of this loop, you could draw the segment
# corresponding to that loop
#set a empty vector for future assigning colors
color=vector()
#get segments with corresponding colors
for (i in 1:nrow(simci)) {
if(smean < simci[i,1] | smean>simci[i,2])
#draw segments
{segments(x0=simci[i,1],y0=i,x1=simci[i,2],y1=i,col="red",lwd=lwd)
color[i]="red"}
else {segments(x0=simci[i,1],y0=i,x1=simci[i,2],y1=i,col="blue",lwd=lwd)
color[i]="blue"}
}
# Draw the vertical line corresponding to the suspected mean
abline(v=smean)
# Return the row numbers of rows that did not contain susmean
return(which(color=="red"))
}
# YOU WRITE THE FOLLOWING FUNCTION
outside <- plot.ci(sci, smean,lwd=1)
# The following matrix rows do NOT contain smean
outside
#test the example
set.seed(430)
x <- rnorm(100, 10)
smean <- mean(x)
sci <- replicate(100, t.test(sample(x, rep = T))$conf.int)
sci <- t(sci)
plot.ci(simci=sci,susmean=smean)
#example test
plot.ci(lwd=2)
#import dataset
url <- "https://raw.githubusercontent.com/steviep42/bios545_spring_2022/main/DATA.DIR/cases_covid.csv"
cases <- read.csv(url)
#read head of the dataframe
head(cases)
mycovid <- function(d1="03-10-21", d2="01-01-22", df=cases, col=c("orange", "blue")) {
# INPUT: d1, d2 - Dates of the form MM-DD-YY
# defaults: d1 is 03-10-21" and d2 is "01-01-22"
# cases- A data frame as above
# col - A two element vector of valid colors. The first is used to
# color the bars and the second for the 7-day case average
# default is "orange" and 'blue"
#
# OUTPUT: none except for a plot
# Do necessary date conversions on both df as well as d1 and d2
df$date <- as.Date(df$date,"%Y-%m-%d")
d1=as.Date(d1, format="%m-%d-%y")
d2=as.Date(d2, format="%m-%d-%y")
# Make sure that d2 is > d1 by at least 15 days
if ((d2-d1) <15)
stop(paste("Difference between given dates", d1, d2,"is< 15"))
# filter out rows between d2 and d1 and rows where cases happens to be positive
df<-df[df$date>=d1 & df$date<=d2,]
# Divide the cases variable by 1,000
df$cases=df$cases/1000
# Divide the cases_avg variable by 1,000
df$cases_avg=df$cases_avg/1000
# filter out any rows where cases happens to be 0 or negative
df <- df[df$cases>=0,]
# Figure out on what day the max avg_cases occurred
max_avg<-max(df$cases_avg)
# Plot the cases with a title- perhaps use a null plot and Put up the cases of type "h"
plot(df$cases~df$date, type="h",
main=paste("COVID-19 cases:", d1, d2),
xlab="Date", ylab= "Cases/1,000 (Reported and Probable)",
col=col[1],
lwd = 1.5)
# Plot the average_cases
lines(df$date, df$cases_avg, col=col[2], lwd=2.5)
# Create the subtitle in the upper margin
mtext("https://raw.githubusercontent.com/nytimes/covid-19-data",side = 3, adj = 0, cex=0.5)
# Put up a horizontal line corresponding to the highest average number of cases
abline(h=max_avg, col="black", lty=2)
# Place a text label UNDER the highest average number of cases line at the mean date for the given d1 d2 range
text(mean(c(d1, d2)) ,0.9*max_avg-9, "Max 7-day Average")
#Set up grid in plot
grid()
# Setup a legend
legend("topleft",legend=c("Cases", "7-day Case Average"),
pch=18,col=col,horiz=FALSE,cex=0.9,pt.cex=1.4)
}
mycovid("03-10-21","01-01-22")
#example test
mycovid("06-01-21","03-01-22",cases,c("purple","gold"))
#example test
mycovid()
binom <- dbinom(40,80,0.5)
hyper <- dhyper(40,160,80,80)
hyper <- .ldhyper()
pchisq(q=13.152, df=6, lower.tail=FALSE)
676.861-676.571
pchisq(q=0.29, df=4, lower.tail=FALSE)
pchisq(13.148,6)
?pchisq
pchisq(13.148,6,lower.tail = FALSE)
set.seed(1234)
id = c(1:50)
idlong = id%x%rep(1,5)
beta0=1
beta1=2
x = rnorm(250)
theta = rnorm(50,sd = sqrt(2))
thetalong=theta%x%rep(1,5)
y = beta0+beta1*x+thetalong+rnorm(250,mean=0,sd=sqrt(2))
simdata = data.frame(y,x,idlong)
install.packages(lmerTest)
install.packages("lmerTest")
install.packages("lmerTest")
library(lmerTest)
fit1_2 = lmerTest::lmer (y~x+(1|idlong), data = simdata)
summary(fit1_2)
gam.check(fit1_3)
mgcv::gam.check(fit1_3)
library (mgcv)
fit1_3 = gam(y~s(x)+s(factor(idlong),bs = 're'),data=simdata)
summary(fit1_3)
mgcv::gam.check(fit1_3)
gam.check(fit1_3)
gam.check(fit1_3)
newd <- simdata[1,]
newd$x <- 1 - 0.00001
y1 <- predict(fit1_3,newd)
newd$x <- 1 + 0.00001
y2 <- predict(fit1_3,newd)
(y2 - y1)/0.00002
#gam.check(fit1_3)
newd <- simdata[1,]
newd$x <- 1 - 0.00001
y1 <- predict(fit1_3,newd)
newd$x <- 1 + 0.00001
y2 <- predict(fit1_3,newd)
(y2 - y1)/0.00002
#gam.check(fit1_3)
newd <- simdata[1,]
newd$x <- 1 - 0.000001
y1 <- predict(fit1_3,newd)
newd$x <- 1 + 0.000001
y2 <- predict(fit1_3,newd)
(y2 - y1)/0.000002
plot(simdata$x,simdata$y)
plot(fit1_3)
install.packages("itsadug")
install.packages("itsadug")
install.packages("itsadug")
fit2_1 <- lmerTest::lmer(WB_fa.combat  ~ Corr_age + factor(Sex) + (1|Unique_ID), data = infant)
fit2_1 <- lmerTest::lmer(WB_fa.combat  ~ Corr_age + factor(Sex) + (1|Unique_ID), data = data2)
data2 <- read.csv("/Users/monica/Desktop/bios526/hw2/infant_trajectories.csv")
fit2_1 <- lmerTest::lmer(WB_fa.combat  ~ Corr_age + factor(Sex) + (1|Unique_ID), data = data2)
summary(fit2_1)
plot(fit_3_1 , type = c("p", "smooth"))
fit2_1 <- lmerTest::lmer(WB_fa.combat  ~ Corr_age + factor(Sex) + (1|Unique_ID), data = data2)
summary(fit2_1)
plot(fit2_1 , type = c("p", "smooth"))
fit2_1 <- lmerTest::lmer(WB_fa.combat  ~ Corr_age + factor(Sex) + (1|Unique_ID), data = data2)
summary(fit2_1)
plot(fit2_1 , type = c("p", "smooth"))
plot(fit2_1, sqrt(abs(resid(.))) ~ fitted(.), type = c("p", "smooth"))
fit2_1 <- lmerTest::lmer(WB_fa.combat  ~ Corr_age + factor(Sex) + (1|Unique_ID), data = data2)
summary(fit2_1)
plot(fit2_1 , type = c("p", "smooth"))
install.packages("itsadug")
itsadug::plot_smooth(fit1_3)
itsadug::plot_smooth(x)
itsadug::plot_smooth(simdata$x)
itsadug::plot_smooth(fit1_3,view='x')
itsadug::plot_smooth(fit1_3)
itsadug::plot_smooth(fit1_3, view = x)
itsadug::plot_smooth(fit1_3, view = 'x')
itsadug::plot_smooth(fit1_3, view = x)
itsadug::plot_smooth(fit1_3, view = 'idlong)
itsadug::plot_smooth(fit1_3, view = 'idlong')
itsadug::plot_smooth(fit1_3, view = 's(x)')
itsadug::plot_smooth(fit1_3, view = 'x')
itsadug::plot_smooth(fit1_3, view = 'x', rm.ranef=TRUE)
itsadug::plot_smooth(fit1_3, view = 'x', rm.ranef=TRUE)
range(x)
itsadug::plot_smooth(fit1_3, view = 'x', xlim = c(-3,3), rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', xlim = c(0,3), rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', cond = list(idlong=c(1,250)), xlim = c(0,3), rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', cond = list(idlong=60), xlim = c(-3,3), rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', cond = list(idlong=60), xlim = c(-2,2), rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', cond = list(idlong), xlim = c(-2,2), rm.ranef=FALSE)
x
itsadug::plot_smooth(fit1_3, view = 'x', cond = list(idlong), xlim = c(-1,2), rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', cond = list(idlong=60), xlim = c(-1,2), rm.ranef=FALSE)
idlong
itsadug::plot_smooth(fit1_3, view = 'x', cond = list(idlong=15), xlim = c(-1,2), rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', rm.ranef=TRUE)
itsadug::plot_smooth(fit1_3, view = 'x', rm.ranef=TRUE)
itsadug::plot_smooth(fit1_3, view = 'x', rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'idlong', rm.ranef=FALSE)
itsadug::plot_smooth(fit1_3, view = 'x', rm.ranef=FALSE)
fit2_3 <- gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(Unique_ID,bs = 're'),data=data2)
length(data2$WB_fa.combat)
length(data2$Corr_age)
length(data2$Sex)
length(data2$Unique_ID)
fit2_3 = gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(Unique_ID,bs = 're'),data=data2)
fit2_3 = gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(Unique_ID, bs = 're'),data=data2)
fit2_3 = mgcv::gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(Unique_ID, bs = 're'),data=data2)
fit2_3 <- mgcv::gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(Unique_ID, bs = 're'), data=data2)
itsadug::plot_smooth(fit1_3, 'x')
itsadug::plot_smooth(fit1_3, "x")
library (mgcv)
simdata$idlongF <- factor(simdata$idlong)
fit1_3 = gam(y~s(x)+s(idlongF,bs = 're'),data=simdata)
summary(fit1_3)
itsadug::plot_smooth(fit1_3, "x")
itsadug::plot_smooth(fit1_3, "x")
plot(fit1_3)
fit2_3 <- mgcv::gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(factor(Unique_ID), bs = 're'), data=data2)
data2$Unique_ID <- factor(data2$Unique_ID)
fit2_3 <- mgcv::gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(factor(Unique_ID), bs = 're'), data=data2)
data2$Unique_ID <- factor(data2$Unique_ID)
fit2_3 <- mgcv::gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(Unique_ID, bs = 're'), data=data2)
summary(fit2_3)
data2$Unique_ID <- factor(data2$Unique_ID)
fit2_3 <- mgcv::gam(WB_fa.combat~s(Corr_age)+factor(Sex)+s(Unique_ID, bs = 're'), data=data2)
summary(fit2_3)
geom_smooth(fit2_3)
ggplot2::geom_smooth(fit2_3)
ggplot2::geom_smooth(aes(x=predict(fit2_3), y=fit2_3$residuals))
library(ggplot)
install.packages("ggplot")
library(ggplot)
remove.packages("ggplot")
install.packages("ggplot")
gam.check(fit2_3)
library (mgcv)
simdata$idlongF <- factor(simdata$idlong)
fit1_3 = gam(y~s(x)+s(idlongF,bs = 're'),data=simdata)
summary(fit1_3)
itsadug::plot_smooth(fit1_3, "x")
itsadug::plot_smooth(fit1_3, view = "x", rm.ranef = TRUE)
library (mgcv)
simdata$idlong <- factor(simdata$idlong)
fit1_3 = gam(y~s(x)+s(idlong,bs = 're'),data=simdata)
summary(fit1_3)
itsadug::plot_smooth(fit1_3, view = "x", rm.ranef = TRUE)
library (mgcv)
simdata$idlong <- factor(simdata$idlong)
fit1_3 = gam(y~s(x)+s(idlong,bs = 're'),data=simdata)
summary(fit1_3)
#gam.check(fit1_3)
newd <- simdata[1,]
newd$x <- 1 - 0.000001
y1 <- predict(fit1_3,newd)
newd$x <- 1 + 0.000001
y2 <- predict(fit1_3,newd)
(y2 - y1)/0.000002
plot(fit1_3)
itsadug::plot_smooth(fit1_3, view = "x", rm.ranef = TRUE)
library (mgcv)
simdata$idlong <- as.factor(simdata$idlong)
fit1_3 = gam(y~s(x)+s(idlong,bs = 're'),data=simdata)
summary(fit1_3)
itsadug::plot_smooth(fit1_3, view = "x", rm.ranef = TRUE)
pwd
setwd("~/Desktop/info500/hiv_project_week13")
setwd("~/Desktop/info500/final_project")
setwd("~/Desktop/info500/final_project")
setwd("~/Desktop/info500/final_project")
setwd("~/Desktop/info500/final_project")
setwd("~/Desktop/info500/final_project")
